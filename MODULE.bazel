module(
    name = "eparser",
    version = "0.0.1",
    compatibility_level = 1,
)


# load python bazel rules
PY_RULES_VERSION = "0.27.1"

OCI_RULES_VERSION = "1.8.0"

CONTAINER_STRUCTURE_TEST_VERSION = "1.16.0"

ASPECT_BAZEL_LIB_VERSION = "2.7.8"

PY_VERSION = "3.11"

bazel_dep(name = "rules_python", version = "0.34.0")
bazel_dep(name = "rules_oci", version = OCI_RULES_VERSION)
bazel_dep(name = "container_structure_test", version = CONTAINER_STRUCTURE_TEST_VERSION)
bazel_dep(name = "aspect_bazel_lib", version = ASPECT_BAZEL_LIB_VERSION)
bazel_dep(name = "aspect_rules_py", version = "0.7.3")
bazel_dep(name = "aspect_rules_lint", version = "1.0.2")
bazel_dep(name = "rules_multirun", version = "0.9.0")
bazel_dep(name = "rules_bison", version = "0.3")
bazel_dep(name = "rules_flex", version = "0.2.1")

# ----------------------- PYTHON GAZELLE ------------------------------------
# The following stanza defines the dependency rules_python_gazelle_plugin.
# For typical setups you set the version.
bazel_dep(name = "rules_python_gazelle_plugin", version = "0.22.0")

# The following stanza defines the dependency gazelle.
bazel_dep(name = "gazelle", version = "0.31.0", repo_name = "bazel_gazelle")
# ----------------------- PYTHON GAZELLE ------------------------------------

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have mulitple toolchain versions.
    is_default = True,
    python_version = PY_VERSION,
)

# You only need to load this repositories if you are using multiple Python versions.
# I'm doing this for the sake of consistency with the original G repo
use_repo(python, "python_3_11", "python_versions")

# Register an already-defined toolchain so that Bazel can use it during toolchain resolution.
register_toolchains(
    "@python_3_11//:all",
)

# This extension allows a user to create modifications to how rules_python
# creates different wheel repositories.  Different attributes allow the user
# to modify the BUILD file, and copy files.
# See @rules_python//python/extensions:whl_mods.bzl attributes for more information
# on each of the attributes.
# You are able to set a hub name, so that you can have different modifications of the same
# wheel in different pip hubs.
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# fetch 3rd party libraries
pip.parse(
    hub_name = "pip",
    python_version = PY_VERSION,
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pip")


# flex dependencies
flex = use_extension(
    "@rules_flex//flex/extensions:flex_repository_ext.bzl",
    "flex_repository_ext",
)
flex.repository(
    name = "flex",
    version = "2.6.4",
    extra_copts = ["-O3"],
)
use_repo(flex, "flex")
register_toolchains("@flex//:toolchain")


# bison dependencies
bison = use_extension(
    "@rules_bison//bison/extensions:bison_repository_ext.bzl",
    "bison_repository_ext",
)
bison.repository(
    name = "bison",
    version = "3.3.2",
    extra_copts = ["-O3"],
)
use_repo(bison, "bison")
register_toolchains("@bison//:toolchain")