module Specman begin
        type Symbol_;
        type Boolean;

        phylum Module;

        phylum Statement;
        phylum Statements = LIST[Statement];

        phylum StructMember;
        phylum StructMembers = LIST[StructMember];

        phylum Action;
        phylum Actions = LIST[Action];

        phylum Expression;
        phylum Expressions = LIST[Expression];

        phylum Formal;
        phylum Formals = LIST[Formal];

        phylum Case;
        phylum Cases = LIST[Case];

        phylum SequenceItem;
        phylum SequenceItems = LIST[SequenceItem];

        phylum CovergroupOption;
        phylum CovergroupOptions = LIST[CovergroupOption];

        phylum CovergroupItem;
        phylum CovergroupItems = LIST[CovergroupItem];

        phylum CovergroupItemOption;
        phylum CovergroupItemOptions = LIST[CovergroupItemOption];

        phylum CovergroupExtensionID;


        constructor module_(stmts: Statements) : Module;

        constructor package(pkg_name: Symbol_) : Statement;
        constructor unit(unit_name: Symbol_; members: StructMembers) : Statement;
        constructor struct_st(struct_name: Symbol_; members: StructMembers) : Statement;
        constructor struct_like_st(struct_name: Symbol_; base_struct_name: Symbol_; members: StructMembers) : Statement;
        constructor extend_struct_st(struct_type_name: Expressions; members: StructMembers) : Statement;
        constructor enum_type_st(type_id: Symbol_; enum_list_items: Expressions; width_expr: Expression)  : Statement;
        constructor extend_enum_type_st(type_id: Symbol_; enum_list_items: Expressions)  : Statement;
        constructor scalar_subtype_st(subtype_id: Symbol_; type_id: Expression; ranges: Expressions)  : Statement;
        constructor scalar_sized_type_st(type_id: Symbol_; base_type_id: Expression; ranges_expr: Expressions; width_expr: Expression)  : Statement;
        constructor import(pkg_id: Symbol_)  : Statement;
        
        constructor virtual_sequence_st(id: Symbol_; seq_options: SequenceItems) : Statement;
        constructor sequence_st(id: Symbol_; seq_options: SequenceItems) : Statement;
        constructor sequence_item_kind_it(id: Symbol_) : SequenceItem;
        constructor sequence_created_kind_name_it(id: Symbol_) : SequenceItem;
        constructor sequence_created_driver_name_it(id: Symbol_) : SequenceItem;
        constructor sequence_base_kind_it(id: Symbol_) : SequenceItem;
        constructor sequence_driver_base_kind_it(id: Symbol_) : SequenceItem;

        constructor formal(name: Symbol_; type_: Expression) : Formal;

        constructor struct_field_sm(id: Symbol_; type: Expression; is_physical : Boolean; do_not_gen: Boolean) : StructMember;
        constructor struct_field_list_sm(id: Symbol_; len_expr: Expression; list_base_type: Expression; is_physical : Boolean; do_not_gen: Boolean) : StructMember;
        constructor struct_field_assoc_list_sm(id: Symbol_; list_type_expr: Expression; is_physical : Boolean) : StructMember;

        constructor method_dec_sm(id: Symbol_; arguments: Formals; return_type: Expression; actions_: Actions) : StructMember;
        constructor method_dec_also_sm(id: Symbol_; arguments: Formals; return_type: Expression; actions_: Actions) : StructMember;
        constructor method_dec_first_sm(id: Symbol_; arguments: Formals; return_type: Expression; actions_: Actions) : StructMember;
        constructor method_dec_only_sm(id: Symbol_; arguments: Formals; return_type: Expression; actions_: Actions) : StructMember;
        constructor method_dec_empty_sm(id: Symbol_; arguments: Formals; return_type: Expression) : StructMember;
        constructor method_dec_undef_sm(id: Symbol_; arguments: Formals; return_type: Expression) : StructMember;

        constructor tcm_dec_sm(id: Symbol_; arguments: Formals; return_type: Expression; event_id_expr: Expression ;actions_: Actions) : StructMember;
        constructor tcm_dec_also_sm (id: Symbol_; arguments: Formals; return_type: Expression; event_id_expr: Expression; actions_: Actions) : StructMember;
        constructor tcm_dec_first_sm(id: Symbol_; arguments: Formals; return_type: Expression; event_id_expr: Expression; actions_: Actions) : StructMember;
        constructor tcm_dec_only_sm (id: Symbol_; arguments: Formals; return_type: Expression; event_id_expr: Expression; actions_: Actions) : StructMember;
        constructor tcm_dec_empty_sm(id: Symbol_; arguments: Formals; return_type: Expression; event_id_expr: Expression) : StructMember;
        constructor tcm_dec_undef_sm(id: Symbol_; arguments: Formals; return_type: Expression; event_id_expr: Expression) : StructMember;

        constructor when_subtype_sm(subtype_mods: Expressions; subtype_members: StructMembers) : StructMember;
        constructor constraint_def_sm(constraint_expr: Expression) : StructMember;
        constructor on_event_sm(event_name: Expression; action_block: Actions) : StructMember;

        constructor simple_event_dec_sm(id: Symbol_) : StructMember;
        constructor event_def_sm(id: Symbol_; temporal: Expression) : StructMember;
        constructor event_def_override_sm(id: Symbol_; temporal: Expression) : StructMember;
        

        constructor temporal_expr(temporal: Expression; sample_event: Expression) : Expression;
        constructor event_ref_expr(event_name: Expression) : Expression;
        constructor action_attached_temporal_expr(temporal: Expression; actions: Actions) : Expression;
        constructor not_temporal_expr(temporal: Expression) : Expression;
        constructor fail_temporal_expr(temporal: Expression) : Expression;
        constructor eventually_temporal_expr(temporal: Expression) : Expression;
        constructor detach_temporal_expr(temporal: Expression) : Expression;
        constructor yield_temporal_expr(trigger: Expression; temporal: Expression) : Expression;
        constructor true_temporal_expr(bool_expr: Expression) : Expression;
        constructor rise_temporal_expr(hdl_path: Expression) : Expression;
        constructor fall_temporal_expr(hdl_path: Expression) : Expression;
        constructor change_temporal_expr(hdl_path: Expression) : Expression;
        constructor and_temporal_expr(te1: Expression; te2: Expression) : Expression;
        constructor or_temporal_expr(te1: Expression; te2: Expression) : Expression;
        constructor sequence_temporal_expr(temporals: Expressions) : Expression;
        constructor fixed_repetition_expr(rep: Expression; temporal: Expression) : Expression;
        constructor first_match_repetition_expr(from_rep: Expression; to_rep: Expression; temporal: Expression; match_temporal: Expression) : Expression;
        constructor true_match_repetition_expr(from_rep: Expression; to_rep: Expression; temporal: Expression) : Expression;
        constructor zero_repetition_base_expr() : Expression;
        constructor inf_repetition_base_expr() : Expression;
        constructor cycle_temporal_expr() : Expression;

        constructor expect_nameless_sm(temporal: Expression; dut_error_call: Expression): StructMember;
        constructor expect_sm(id: Expression; temporal: Expression; dut_error_call: Expression): StructMember;
        constructor expect_override_sm(id: Expression; temporal: Expression; dut_error_call: Expression): StructMember;

        constructor assume_nameless_sm(temporal: Expression; dut_error_call: Expression): StructMember;
        constructor assume_sm(id: Expression; temporal: Expression; dut_error_call: Expression): StructMember;
        constructor assume_override_sm(id: Expression; temporal: Expression; dut_error_call: Expression): StructMember;
        constructor empty_covergroup_sm(event_id: Symbol_): StructMember;
        constructor covergroup_sm(event_id: Symbol_; cg_opts: CovergroupOptions; cg_items: CovergroupItems): StructMember;
        constructor covergroup_extension_sm(event_id: Symbol_; instance_id: CovergroupExtensionID; cg_opts: CovergroupOptions; cg_items: CovergroupItems): StructMember;

        constructor covergroup_per_type_ceid(): CovergroupExtensionID;
        constructor covergroup_per_unit_instance_ceid(e_path : Expression): CovergroupExtensionID;
        constructor covergroup_per_instance_ceid(item_name: Symbol_; bucket_name: Symbol_): CovergroupExtensionID;

        constructor global_cgo(bool_litral: Expression) : CovergroupOption;
        constructor no_collect_cgo(bool_litral: Expression) : CovergroupOption;
        constructor per_unit_instance_cgo(hier_id: Expression) : CovergroupOption;
        constructor radix_dec_cgo() : CovergroupOption;
        constructor radix_hex_cgo() : CovergroupOption;
        constructor radix_bin_cgo() : CovergroupOption;
        constructor text_cgo(description: Symbol_) : CovergroupOption;
        constructor weight_cgo(value: Symbol_) : CovergroupOption;
        constructor when_cgo(bool_expr: Expression) : CovergroupOption;

        constructor simple_covergroup_item_cgi(item_id: Symbol_; cgi_options: CovergroupItemOptions) : CovergroupItem;
        constructor on_the_fly_covergroup_item_cgi(item_id      : Symbol_; 
                                                   type_        : Expression; 
                                                   sampled_val  : Expression; 
                                                   cgi_options : CovergroupItemOptions) : CovergroupItem;
        constructor cross_covergroup_item_cgi(cg_items: Expressions; cgi_options: CovergroupItemOptions) : CovergroupItem;
        constructor transition_covergroup_item_cgi(item_id: Symbol_; cgi_options: CovergroupItemOptions) : CovergroupItem;

        constructor at_least_cgio(num: Symbol_) : CovergroupItemOption;
        constructor ignore_cgio(item_bool_expr: Expression) : CovergroupItemOption;
        constructor illegal_cgio(bool_litral: Expression) : CovergroupItemOption;
        constructor no_collect_cgio(bool_litral: Expression) : CovergroupItemOption;
        constructor no_trace_cgio(bool_litral: Expression) : CovergroupItemOption;
        constructor num_of_buckets_cgio(num: Symbol_) : CovergroupItemOption;
        constructor per_instance_cgio(bool_litral: Expression) : CovergroupItemOption;
        constructor radix_dec_cgio() : CovergroupItemOption;
        constructor radix_hex_cgio() : CovergroupItemOption;
        constructor radix_bin_cgio() : CovergroupItemOption;
        constructor text_cgio(description: Symbol_) : CovergroupItemOption;
        constructor weight_cgio(value: Symbol_) : CovergroupItemOption;
        constructor when_cgio(bool_expr: Expression) : CovergroupItemOption;

        constructor true_literal_expr() : Expression;
        constructor false_literal_expr() : Expression;

        constructor id_expr(id: Symbol_) : Expression;
        
        constructor list_type_expr(base_type_expr: Expression) : Expression;
        constructor assoc_list_type_expr(key_id: Symbol_; base_type_expr: Expression) : Expression;
        constructor enum_type_expr(enum_list_expr: Expressions; width_modifier_expr: Expression) : Expression;
        constructor enum_list_item(id: Symbol_; expr: Expression) : Expression;
        
        constructor bitwise_not_expr(e: Expression) : Expression;
        constructor bitwise_and_expr(e1: Expression; e2: Expression) : Expression;
        constructor bitwise_or_expr(e1: Expression; e2: Expression) : Expression;
        constructor bitwise_xor_expr(e1: Expression; e2: Expression) : Expression;
        constructor shift_left_expr(e1: Expression; e2: Expression) : Expression;
        constructor right_left_expr(e1: Expression; e2: Expression) : Expression;
        
        constructor logical_not_expr(e: Expression) : Expression;
        constructor logical_and_expr(e1: Expression; e2: Expression) : Expression;
        constructor logical_or_expr(e1: Expression; e2: Expression) : Expression;
        constructor implication_expr(e1: Expression; e2: Expression) : Expression;

        constructor unary_positive_expr(e: Expression) : Expression;
        constructor unary_negative_expr(e: Expression) : Expression;

        constructor binary_add_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_sub_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_mul_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_div_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_remainder_expr(e1: Expression; e2: Expression) : Expression;



        constructor less_then_expr(e1: Expression; e2: Expression) : Expression;
        constructor greater_then_expr(e1: Expression; e2: Expression) : Expression;
        constructor less_then_or_equal_expr(e1: Expression; e2: Expression) : Expression;
        constructor greater_then_or_equal_expr(e1: Expression; e2: Expression) : Expression;
        constructor equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor non_equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor hdl_equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor hdl_non_equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor str_match_expr(str_expr: Expression; pattern_expr: Expression) : Expression;
        constructor str_does_not_match_expr(str_expr: Expression; pattern_expr: Expression) : Expression;

        constructor in_expr(exp: Expression; inside: Expression) : Expression;
        constructor list_indexing_expr(list_exp: Expression; idx_expr: Expression) : Expression;
        constructor list_slicing_expr(list_exp: Expression; range_expr: Expression) : Expression;
        constructor bit_slicing_expr(list_exp: Expression; bit_slice_expr: Expression) : Expression;
        constructor list_concat_expr(list_concat_items: Expressions) : Expression;
        constructor bit_concat_expr(bit_concat_items: Expressions) : Expression;
        constructor bit_slice_expr(bottom: Expression; top: Expression) : Expression;
        constructor range_modifier_expr(bottom: Expression; top: Expression) : Expression;
        constructor ranges_modifier_expr(ranges: Expressions) : Expression;
        constructor sized_bits_scalar_expr(width_expr: Expression) : Expression;
        constructor sized_bytes_scalar_expr(width_expr: Expression) : Expression;

        constructor new_allocate_expr(struct_type_block : Expression; scoped_name: Symbol_; actions: Actions) : Expression;
        constructor new_nameless_allocate_expr(struct_type_block : Expression; actions: Actions) : Expression;
        constructor struct_type_expr_with_opt_action_block(struct_id_expr : Expression; opt_action_block_expt : Expression) : Expression;
        constructor named_action_block(struct_id_expr : Expression; action_block: Actions) : Expression;
        constructor struct_type_id(struct_type_modifiers : Expressions; struct_id_expr : Expression) : Expression;
        constructor struct_type_modifier(value: Expression; id: Expression) : Expression;
        constructor defined_type_identifier_expr(modifiers: Expressions) : Expression;
        constructor type_introspec_expr(field_id: Expression; type_id: Expression) : Expression;
        constructor type_introspec_negation_expr(field_id: Expression; type_id: Expression) : Expression;
        constructor struct_hier_ref_expr(hiers: Expressions) : Expression;
        constructor hdl_path_name_expr(hdl_hier_ref: Symbol_) : Expression;
        constructor ternary_operator_expr(condition: Expression; true_expr: Expression; false_expr: Expression) : Expression;
        constructor cast_operator_expr(casted_expr: Expression; dest_type_expr: Expression) : Expression;

        constructor method_call_expr(base: Expression; arguments: Expressions) : Expression;

        constructor constraint_expr(bool_expr: Expression) : Expression; 
        constructor soft_constraint_expr(bool_expr: Expression) : Expression;
        constructor all_of_constraint_expr(constraints: Expressions) : Expression;
        constructor list_items_constraint_expr(item_name: Expression; gen_item: Expression; constraints: Expressions) : Expression;
        constructor field_type_constraint_by_type_expr(field_ : Expression; type_: Expression) : Expression;
        constructor field_type_constraint_by_field_expr(field_ : Expression; type_: Expression) : Expression;
        constructor distribution_constraint_expr(gen_item: Expression; distribution: Cases) : Expression;

        constructor distribution_branch_case(int_: Expression; value: Expression) : Case;

        constructor me_expr() : Expression;
        constructor it_expr() : Expression;
        constructor str_expr(str: Symbol_) : Expression;
        constructor int_expr(int_: Symbol_) : Expression;
        
        constructor scalar_subtype_expr(predefined_base_type: Expression; range_modifier: Expression; width_modifier: Expression) : Expression;

        constructor predefined_type_int_expr() : Expression;
        constructor predefined_type_uint_expr() : Expression;
        constructor predefined_type_bool_expr() : Expression;
        constructor predefined_type_bit_expr() : Expression;
        constructor predefined_type_byte_expr() : Expression;
        constructor predefined_type_nibble_expr() : Expression;
        constructor predefined_type_time_expr() : Expression;

        constructor no_expr() : Expression;
        
        constructor var_decl_act(name: Symbol_; type_id: Expression; init_expr: Expression) : Action;
        constructor var_assign_act(id_expr: Expression; assign_expr: Expression) : Action;
        
        constructor compound_add_act(id: Expression; e2: Expression) : Action;
        constructor compound_sub_act(id: Expression; e2: Expression) : Action;
        constructor compound_mul_act(id: Expression; e2: Expression) : Action;
        constructor compound_div_act(id: Expression; e2: Expression) : Action;
        constructor compound_mod_act(id: Expression; e2: Expression) : Action;

        constructor compound_bool_and_act(id: Expression; e2: Expression) : Action;
        constructor compound_bool_or_act(id: Expression;  e2: Expression) : Action;

        constructor compound_bit_and_act(id: Expression; e2: Expression) : Action;
        constructor compound_bit_or_act(id: Expression; e2: Expression) : Action;
        constructor compound_bit_xor_act(id: Expression; e2: Expression) : Action;
        constructor compound_shift_left_act(id: Expression; e2: Expression) : Action;
        constructor compound_right_left_act(id: Expression; e2: Expression) : Action;

        constructor force_act(hdl_or_port: Expression; exp: Expression) : Action;
        constructor release_act(hdl_or_port: Expression) : Action;
        
        constructor if_then_else_act(condition : Expression; action: Action; else_clause: Action) : Action;
        constructor scoped_actions_block_act(actions: Actions) : Action;
        constructor case_bool_act(bool_case_branch_items: Cases) : Action;
        constructor case_bool_branch_item_case(bool_exp: Expression; actions: Actions) : Case;
        constructor default_case_branch_item_case(actions: Actions) : Case;
        
        constructor no_action() : Action;
end;