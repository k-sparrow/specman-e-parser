module Specman begin
        type Symbol_;
        type Boolean;

        phylum Module;

        phylum Statement;
        phylum Statements = LIST[Statement];

        phylum StructMember;
        phylum StructMembers = LIST[StructMember];

        phylum Action;
        phylum Actions = LIST[Action];

        phylum Expression;
        phylum Expressions = LIST[Expression];

        phylum Formal;
        phylum Formals = LIST[Formal];

        constructor module_(stmts: Statements) : Module;

        constructor package(pkg_name: Symbol_) : Statement;
        constructor unit(unit_name: Symbol_; members: StructMembers) : Statement;
        constructor struct_(struct_name: Symbol_; members: StructMembers) : Statement;
        constructor extend_like(uos_name: Symbol_; base_uos_name: Symbol_; members: StructMembers) : Statement;
        constructor extend_when(uos_name: Symbol_; members: StructMembers) : Statement;
        constructor type_(type_id: Symbol_; type_expr: Expression)  : Statement;
        constructor import(pkg_id: Symbol_)  : Statement;
        
        constructor formal(name: Symbol_; type_: Symbol_) : Formal;

        constructor struct_field_sm(id: Symbol_; type: Symbol_) : StructMember;
        constructor struct_field_list_sm(id: Symbol_; len_expr: Expression; list_type: Symbol_) : StructMember;
        constructor struct_field_assoc_list_sm(id: Symbol_; key_type: Expression; list_type: Symbol_) : StructMember;

        constructor method_dec_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; actions_: Actions) : StructMember;
        constructor method_dec_also_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; actions_: Actions) : StructMember;
        constructor method_dec_first_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; actions_: Actions) : StructMember;
        constructor method_dec_only_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; actions_: Actions) : StructMember;
        constructor method_dec_empty_sm(id: Symbol_; arguments: Formals; return_type: Symbol_) : StructMember;
        constructor method_dec_undef_sm(id: Symbol_; arguments: Formals; return_type: Symbol_) : StructMember;

        constructor tcm_dec_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; event_id_expr: Expression ;actions_: Actions) : StructMember;
        constructor tcm_dec_also_sm (id: Symbol_; arguments: Formals; return_type: Symbol_; event_id_expr: Expression; actions_: Actions) : StructMember;
        constructor tcm_dec_first_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; event_id_expr: Expression; actions_: Actions) : StructMember;
        constructor tcm_dec_only_sm (id: Symbol_; arguments: Formals; return_type: Symbol_; event_id_expr: Expression; actions_: Actions) : StructMember;
        constructor tcm_dec_empty_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; event_id_expr: Expression) : StructMember;
        constructor tcm_dec_undef_sm(id: Symbol_; arguments: Formals; return_type: Symbol_; event_id_expr: Expression) : StructMember;

        constructor when_subtype_sm(subtype_mods: Expressions; subtype_members: StructMembers) : StructMember;
        constructor constraint_def_sm(constraint_expr: Expression) : StructMember;
        
        constructor no_action() : Action;

        constructor id_expr(id: Symbol_) : Expression;
        
        constructor enum_type_expr(enum_list_expr: Expressions) : Expression;
        constructor enum_list_item(id: Symbol_; expr: Expression) : Expression;
        
        constructor bitwise_not_expr(e: Expression) : Expression;
        constructor bitwise_and_expr(e1: Expression; e2: Expression) : Expression;
        constructor bitwise_or_expr(e1: Expression; e2: Expression) : Expression;
        constructor bitwise_xor_expr(e1: Expression; e2: Expression) : Expression;
        constructor shift_left_expr(e1: Expression; e2: Expression) : Expression;
        constructor right_left_expr(e1: Expression; e2: Expression) : Expression;
        
        constructor logical_not_expr(e: Expression) : Expression;
        constructor logical_and_expr(e1: Expression; e2: Expression) : Expression;
        constructor logical_or_expr(e1: Expression; e2: Expression) : Expression;
        constructor implication_expr(e1: Expression; e2: Expression) : Expression;

        constructor unary_positive_expr(e: Expression) : Expression;
        constructor unary_negative_expr(e: Expression) : Expression;

        constructor binary_add_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_sub_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_mul_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_div_expr(e1: Expression; e2: Expression) : Expression;
        constructor binary_remainder_expr(e1: Expression; e2: Expression) : Expression;

        constructor less_then_expr(e1: Expression; e2: Expression) : Expression;
        constructor greater_then_expr(e1: Expression; e2: Expression) : Expression;
        constructor less_then_or_equal_expr(e1: Expression; e2: Expression) : Expression;
        constructor greater_then_or_equal_expr(e1: Expression; e2: Expression) : Expression;
        constructor equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor non_equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor hdl_equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor hdl_non_equality_expr(e1: Expression; e2: Expression) : Expression;
        constructor str_match_expr(str_expr: Expression; pattern_expr: Expression) : Expression;
        constructor str_does_not_match_expr(str_expr: Expression; pattern_expr: Expression) : Expression;

        constructor in_expr(exp: Expression; inside: Expression) : Expression;
        constructor list_indexing_expr(list_exp: Expression; idx_expr: Expression) : Expression;
        constructor list_slicing_expr(list_exp: Expression; high_expr: Expression; low_expr: Expression; slice_expr: Expression) : Expression;
        constructor list_splicing_expr(list_exp: Expression; low_expr: Expression; high_expr: Expression) : Expression;
        constructor list_concat_expr(list_concat_items: Expressions) : Expression;
        constructor bit_concat_expr(bit_concat_items: Expressions) : Expression;
        constructor range_modifier_expr(range_modifier_elements_list: Expressions) : Expression;
        constructor sized_bits_scalar_expr(width_expr: Expression) : Expression;
        constructor sized_bytes_scalar_expr(width_expr: Expression) : Expression;

        constructor allocate_expr(opt_struct_type_block : Expression) : Expression;
        constructor struct_type_expr_with_opt_action_block(struct_id_expr : Expression; opt_action_block_expt : Expression) : Expression;
        constructor named_action_block(struct_id_expr : Expression; action_block: Actions) : Expression;
        constructor struct_type_id(struct_type_modifiers : Expressions; struct_id_expr : Expression) : Expression;
        constructor struct_type_modifier(value: Expression; id: Expression) : Expression;
        constructor struct_hier_ref_expr(hiers: Expressions) : Expression;
        constructor hdl_path_name_expr(hdl_hiers: Expressions) : Expression;
        constructor ternary_operator_expr(condition: Expression; true_expr: Expression; false_expr: Expression) : Expression;
        constructor cast_operator_expr(casted_expr: Expression; dest_type_expr: Expression) : Expression;

        constructor constraint_expr(bool_expr: Expression) : Expression; 
        constructor soft_constraint_expr(bool_expr: Expression) : Expression;
        constructor all_of_constraint_expr(constraints: Expressions) : Expression;
        constructor list_items_constraint_expr(item_name: Expression; gen_item: Expression; constraint: Expression) : Expression;
        constructor method_call_expr(base: Expression; arguments: Expressions) : Expression;

        constructor me_expr() : Expression;
        constructor it_expr() : Expression;
        constructor str_expr(str: Symbol_) : Expression;
        constructor int_expr(int_: Symbol_) : Expression;
        constructor no_expr() : Expression;
end;